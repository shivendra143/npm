{
  "_id": "node-fetch@2.0.0-alpha.3",
  "_integrity": "sha1-gDG97WccgG5GBMFrJ6sZc7T+iMw=",
  "_location": "/pacote/make-fetch-happen/node-fetch",
  "_phantomChildren": {},
  "_requested": {
    "type": "version",
    "registry": true,
    "raw": "node-fetch@2.0.0-alpha.3",
    "name": "node-fetch",
    "escapedName": "node-fetch",
    "rawSpec": "2.0.0-alpha.3",
    "saveSpec": null,
    "fetchSpec": "2.0.0-alpha.3"
  },
  "_requiredBy": [
    "/pacote/make-fetch-happen"
  ],
  "_resolved": "https://registry.npmjs.org/node-fetch/-/node-fetch-2.0.0-alpha.3.tgz",
  "_shrinkwrap": null,
  "_spec": "node-fetch@2.0.0-alpha.3",
  "_where": "/Users/zkat/Documents/code/make-fetch-happen",
  "author": {
    "name": "David Frank"
  },
  "bin": null,
  "bugs": {
    "url": "https://github.com/bitinn/node-fetch/issues"
  },
  "bundleDependencies": false,
  "dependencies": {
    "babel-runtime": "^6.11.6",
    "buffer-to-arraybuffer": "0.0.4",
    "encoding": "^0.1.11",
    "is-stream": "^1.0.1"
  },
  "deprecated": false,
  "description": "A light-weight module that brings window.fetch to node.js",
  "devDependencies": {
    "babel-plugin-istanbul": "^3.0.0",
    "babel-plugin-transform-runtime": "^6.15.0",
    "babel-preset-env": "^1.1.8",
    "babel-register": "^6.16.3",
    "bluebird": "^3.3.4",
    "chai": "^3.5.0",
    "chai-as-promised": "^6.0.0",
    "chai-iterator": "^1.1.1",
    "chai-string": "^1.3.0",
    "codecov": "^1.0.1",
    "cross-env": "2.0.1",
    "form-data": ">=1.0.0",
    "is-builtin-module": "^1.0.0",
    "mocha": "^3.1.2",
    "nyc": "^10.0.0",
    "parted": "^0.1.1",
    "promise": "^7.1.1",
    "resumer": "0.0.0",
    "rollup": "^0.37.0",
    "rollup-plugin-babel": "^2.6.1",
    "rollup-plugin-node-resolve": "^2.0.0",
    "whatwg-url": "^4.0.0"
  },
  "files": [
    "lib/index.js",
    "lib/index.es.js"
  ],
  "homepage": "https://github.com/bitinn/node-fetch",
  "keywords": [
    "fetch",
    "http",
    "promise"
  ],
  "license": "MIT",
  "main": "lib/index.js",
  "module": "lib/index.es.js",
  "name": "node-fetch",
  "optionalDependencies": {},
  "peerDependencies": {},
  "readme": "\nnode-fetch\n==========\n\n[![npm version][npm-image]][npm-url]\n[![build status][travis-image]][travis-url]\n[![coverage status][codecov-image]][codecov-url]\n\nA light-weight module that brings `window.fetch` to Node.js\n\n\n# Motivation\n\nInstead of implementing `XMLHttpRequest` in Node.js to run browser-specific [Fetch polyfill](https://github.com/github/fetch), why not go from native `http` to `Fetch` API directly? Hence `node-fetch`, minimal code for a `window.fetch` compatible API on Node.js runtime.\n\nSee Matt Andrews' [isomorphic-fetch](https://github.com/matthew-andrews/isomorphic-fetch) for isomorphic usage (exports `node-fetch` for server-side, `whatwg-fetch` for client-side).\n\n\n# Features\n\n- Stay consistent with `window.fetch` API.\n- Make conscious trade-off when following [whatwg fetch spec](https://fetch.spec.whatwg.org/) and [stream spec](https://streams.spec.whatwg.org/) implementation details, document known difference.\n- Use native promise, but allow substituting it with [insert your favorite promise library].\n- Use native stream for body, on both request and response.\n- Decode content encoding (gzip/deflate) properly, and convert string output (such as `res.text()` and `res.json()`) to UTF-8 automatically.\n- Useful extensions such as timeout, redirect limit, response size limit, [explicit errors](https://github.com/bitinn/node-fetch/blob/master/ERROR-HANDLING.md) for troubleshooting.\n\n\n# Difference from client-side fetch\n\n- See [Known Differences](https://github.com/bitinn/node-fetch/blob/master/LIMITS.md) for details.\n- If you happen to use a missing feature that `window.fetch` offers, feel free to open an issue.\n- Pull requests are welcomed too!\n\n\n# Install\n\n`npm install node-fetch --save`\n\n\n# Usage\n\n```javascript\nimport fetch from 'node-fetch';\n// or\n// const fetch = require('node-fetch');\n\n// if you are using your own Promise library, set it through fetch.Promise. Eg.\n\n// import Bluebird from 'bluebird';\n// fetch.Promise = Bluebird;\n\n// plain text or html\n\nfetch('https://github.com/')\n\t.then(res => res.text())\n\t.then(body => console.log(body));\n\n// json\n\nfetch('https://api.github.com/users/github')\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// catching network error\n// 3xx-5xx responses are NOT network errors, and should be handled in then()\n// you only need one catch() at the end of your promise chain\n\nfetch('http://domain.invalid/')\n\t.catch(err => console.error(err));\n\n// stream\n// the node.js way is to use stream when possible\n\nfetch('https://assets-cdn.github.com/images/modules/logos_page/Octocat.png')\n\t.then(res => {\n\t\tconst dest = fs.createWriteStream('./octocat.png');\n\t\tres.body.pipe(dest);\n\t});\n\n// buffer\n// if you prefer to cache binary data in full, use buffer()\n// note that buffer() is a node-fetch only API\n\nimport fileType from 'file-type';\n\nfetch('https://assets-cdn.github.com/images/modules/logos_page/Octocat.png')\n\t.then(res => res.buffer())\n\t.then(buffer => fileType(buffer))\n\t.then(type => { /* ... */ });\n\n// meta\n\nfetch('https://github.com/')\n\t.then(res => {\n\t\tconsole.log(res.ok);\n\t\tconsole.log(res.status);\n\t\tconsole.log(res.statusText);\n\t\tconsole.log(res.headers.raw());\n\t\tconsole.log(res.headers.get('content-type'));\n\t});\n\n// post\n\nfetch('http://httpbin.org/post', { method: 'POST', body: 'a=1' })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with stream from file\n\nimport { createReadStream } from 'fs';\n\nconst stream = createReadStream('input.txt');\nfetch('http://httpbin.org/post', { method: 'POST', body: stream })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with JSON\n\nvar body = { a: 1 };\nfetch('http://httpbin.org/post', { \n\tmethod: 'POST',\n\tbody:    JSON.stringify(body),\n\theaders: { 'Content-Type': 'application/json' },\n})\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with form-data (detect multipart)\n\nimport FormData from 'form-data';\n\nconst form = new FormData();\nform.append('a', 1);\nfetch('http://httpbin.org/post', { method: 'POST', body: form })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// post with form-data (custom headers)\n// note that getHeaders() is non-standard API\n\nimport FormData from 'form-data';\n\nconst form = new FormData();\nform.append('a', 1);\nfetch('http://httpbin.org/post', { method: 'POST', body: form, headers: form.getHeaders() })\n\t.then(res => res.json())\n\t.then(json => console.log(json));\n\n// node 7+ with async function\n\n(async function () {\n\tconst res = await fetch('https://api.github.com/users/github');\n\tconst json = await res.json();\n\tconsole.log(json);\n})();\n```\n\nSee [test cases](https://github.com/bitinn/node-fetch/blob/master/test/test.js) for more examples.\n\n\n# API\n\n## fetch(url, options)\n\nReturns a `Promise`\n\n### Url\n\nShould be an absolute url, eg `http://example.com/`\n\n### Options\n\nNote that only `method`, `headers`, `redirect` and `body` are allowed in `window.fetch`. Other options are node.js extensions. The default values are shown after each option key.\n\n```\n{\n\tmethod: 'GET'\n\t, headers: {}        // request header. format {a:'1'} or {b:['1','2','3']}\n\t, redirect: 'follow' // set to `manual` to extract redirect headers, `error` to reject redirect\n\t, follow: 20         // maximum redirect count. 0 to not follow redirect\n\t, timeout: 0         // req/res timeout in ms, it resets on redirect. 0 to disable (OS limit applies)\n\t, compress: true     // support gzip/deflate content encoding. false to disable\n\t, size: 0            // maximum response body size in bytes. 0 to disable\n\t, body: empty        // request body. can be a string, buffer, readable stream\n\t, agent: null        // http.Agent instance, allows custom proxy, certificate etc.\n}\n```\n\n\n# License\n\nMIT\n\n\n# Acknowledgement\n\nThanks to [github/fetch](https://github.com/github/fetch) for providing a solid implementation reference.\n\n\n[npm-image]: https://img.shields.io/npm/v/node-fetch.svg?style=flat-square\n[npm-url]: https://www.npmjs.com/package/node-fetch\n[travis-image]: https://img.shields.io/travis/bitinn/node-fetch.svg?style=flat-square\n[travis-url]: https://travis-ci.org/bitinn/node-fetch\n[codecov-image]: https://img.shields.io/codecov/c/github/bitinn/node-fetch.svg?style=flat-square\n[codecov-url]: https://codecov.io/gh/bitinn/node-fetch\n",
  "readmeFilename": "README.md",
  "repository": {
    "type": "git",
    "url": "git+https://github.com/bitinn/node-fetch.git"
  },
  "scripts": {
    "build": "cross-env BABEL_ENV=rollup rollup -c",
    "coverage": "cross-env BABEL_ENV=coverage nyc --reporter json --reporter text mocha -R spec test/test.js && codecov -f coverage/coverage-final.json",
    "prepublish": "npm run build",
    "report": "cross-env BABEL_ENV=coverage nyc --reporter lcov --reporter text mocha -R spec test/test.js",
    "test": "cross-env BABEL_ENV=test mocha --compilers js:babel-register test/test.js"
  },
  "version": "2.0.0-alpha.3"
}
